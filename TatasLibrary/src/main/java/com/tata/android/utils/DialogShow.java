package com.tata.android.utils;import android.app.ProgressDialog;import android.content.Context;import android.content.DialogInterface;import android.content.DialogInterface.OnCancelListener;import android.content.DialogInterface.OnKeyListener;import android.view.KeyEvent;/** * 全局Loading * <p/> * larry create on 2014-2-17 */public class DialogShow {    private static ProgressDialog mDialog;    private static DialogListener listener;    /**     * 默认方式，能被手动点击隐藏或者可点击back按钮退出loading界面     */    public static final int STYLE_NORMAL = 0;    /**     * 阻断式，显示阻断样式，且不可被手动或者back打断     */    public static final int STYLE_BLOCKING = 1;    public static void showRoundProcessDialog(Context activity, String msg) {        showRoundProcessDialog(activity, msg, STYLE_NORMAL, null);    }    public static void showRoundProcessDialog(Context activity, String msg, DialogListener listener) {        showRoundProcessDialog(activity, msg, STYLE_NORMAL, listener);    }    public static void showUnCancleableRoundProcessDialog(Context activity, String msg) {        showRoundProcessDialog(activity, msg, STYLE_BLOCKING, null);    }    public static void showRoundProcessDialog(Context mContext, String msg, int showStyle, DialogListener mlistener) {//        View view = View.inflate(mContext, R.layout.loading_process_dialog, null);//        LinearLayout box = (LinearLayout) view.findViewById(R.id.loading_process_dialog);//        box.setVisibility(View.VISIBLE);//        TextView textView01 = (TextView) view.findViewById(R.id.loading_process_dialog_text);//        textView01.setText(msg);//        mDialog = new AlertDialog.Builder(mContext).setView(view).create();        //        mDialog = HBUtils.getDialogBuilder(mContext).setView(view).create();        mDialog = new ProgressDialog(mContext);        mDialog.setMessage(msg);        mDialog.setIndeterminate(true);        mDialog.setCancelable(showStyle == STYLE_BLOCKING);        mDialog.show();        if (showStyle == STYLE_NORMAL) {            listener = mlistener;            OnKeyListener keyListener = new OnKeyListener() {                @Override                public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {                    if (keyCode == KeyEvent.KEYCODE_BACK && event.getAction() == KeyEvent.ACTION_DOWN) {                        mDialog.dismiss();                        if (listener != null) {                            listener.abortive();                        }                    }                    return false;                }            };            mDialog.setOnKeyListener(keyListener);            mDialog.setOnCancelListener(new OnCancelListener() {                @Override                public void onCancel(DialogInterface dialog) {                    // TODO Auto-generated method stub                    if (listener != null) {                        listener.abortive();                    }                }            });            mDialog.setCanceledOnTouchOutside(false);            mDialog.setCancelable(false);        }        mDialog.show();    }    public static void closeDialog() {        if (mDialog != null && mDialog.isShowing()) {            mDialog.dismiss();        }    }    public static boolean isShowing() {        return mDialog.isShowing();    }    public interface DialogListener {        void abortive();    }}